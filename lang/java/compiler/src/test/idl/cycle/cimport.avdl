@namespace("org.apache.avro.datamodel")
protocol StrataSchema {


/** This enum defines component level operations. I,e on components such as nodes, buckets, calcsets,
coveragesetsâ€¦*/
  enum AVRStandardOperations {
    CREATE, DELETE, UPDATE, NOOP
  }

/** This enum defines the qualifiers for the formula in Metric e.g. Absolute, Net, etc. */
  enum AVRFormulaType {
    NET, ABSOLUTE, NONZERO, NEGATE, NONE
  }

/** FormulaType Definition */
  record AVRFormulaTypeDefinition {
  /** Entity Type */
    union {null,AVRFormulaType} formulaType = null;
  /** Short Name */
    union {null,string} name = null;
  /** Description */
    union {null,string} description = null;
  }

/*******************  look throughs ********************/
/** This enum defines the types of lookthroughs. */
  enum AVRLookThroughType {
    ORIGINAL, CDX_LT, CDS_LT
  }

/** This record defines lookthroughs */
  record AVRLookThroughGroup {
  /** Operation */
    union {null,AVRStandardOperations} operation=null;
  /** Lookthrough ID */
    union {null, int} lookThroughGroupId;
  /** Lookthrough Name */
    union {null, string} name;
  /** Lookthrough Description */
    union {null, string} description;
  /** Lookthrough Pre-filter */
    union {null, AVRHierarchicalBucket} preFilter;
  /** Lookthrough Post-filter */
    union {null, AVRHierarchicalBucket} postFilter;
  /** List of look through lines applicable for the lookthrough */
    union {null, array<AVRLookThroughLine>} lookThroughLines = null;
  }

/** This record defines lookthrough detail */
  record AVRLookThroughLine {
  /** Type of look through */
    union {null, AVRLookThroughType} lookThroughType;
  /** Applicable look through types */
    union {null, array<AVRLookThroughType>} customLookThroughTypes = null;
  /** Override metric */
    union {null, AVRMetric} overrideMetric = null;
  /** Sub lookthrough */
    union {null, AVRLookThroughGroup} nestedLookThroughGroup = null;
  }

/*******************  staged netting sets ********************/
/** This enum defines the types of staged netting actions. */
  enum AVRStagedMarsAction {
    NONE, WHATSTHEWHAT
  }

/** This record defines staged netting sets */
  record AVRStagedMarsSet {
  /** Operation */
    union {null,AVRStandardOperations} operation=null;
  /** StagedMarsSet ID */
    union {null, int} stagedMarsSetId;
  /** Lookthrough Name */
    union {null, string} name;
  /** Lookthrough Description */
    union {null, string} description;
  /** List of staged netting operations applicable for the staged netting set */
    union {null, array<AVRStagedMarsOperation>} stagedMarsOperations = null;
  }

/** This record defines staged netting operation */
  record AVRStagedMarsOperation {
  /** Type of staged netting action */
    union {null, AVRStagedMarsAction} stagedMarsAction;
  /** Staged netting operation's ECMars set */
    union {null, AVRECMarsSet} ecMarsSet = null;
  }

/************************* rules *************************/
/** Entity-Group */
  record AVREntityGroup {
  /** Operation */
    union {null,AVRStandardOperations} operation=null;
  /** EntityGroup ID */
    union {null,int} entityGroupId = null;
  /** Metric Name */
    union {null,string} name = null;
  /** Metric Description */
    union {null,string} description = null;
  /** Entity Types */
    union {null,array<AVREntityType>} entityList = null;
  }

/** Entity-Group List */
  record AVREntityGroupList {
  /** EntityGroup List */
    union {null,array<AVREntityGroup>} entityGroupList = null;
  }

/** Entity-Formula */
  record AVREntityFormula {
  /** Entity Type */
    union {null, AVREntityType} entityType = null;
  /** Metric Formula */
    union {null,string} formula = null;
  }

/** Metric */
  record AVRMetric {
  /** Operation */
    union {null,AVRStandardOperations} operation=null;
  /** Metric ID */
    union {null,int} metricId = null;
  /** Metric Type */
    union {null,int} metricType = null;
  /** Metric Name */
    union {null,string} name = null;
  /** Metric Description */
    union {null,string} description = null;
  /** List of EntityFormula */
    union {null,array<AVREntityFormula>} entityFormulas = null;
  }

/** Node Metric */
  record AVRNodeMetric {
  /** Metric */
    union {null,AVRMetric} metric = null;
  /** Formula Type */
    union {null,AVRFormulaType} formulaType = null;
  /** Calc Set Metric ID */
    union {null,int} calcSetMetricId = null;
  /** Calc Set Metric Bucket */
    union {null, AVRHierarchicalBucket} metricHierarchicalBucket = null;
  /** Calc Set */
    union {null, AVRCalcSet} subCalcSet = null;
  }

/** Calc Set*/
  record AVRCalcSet {
  /** Operation */
    union {null,AVRStandardOperations} operation=null;
  /** Id */
    union {null,int} calcSetId = null;
  /** Calc Set Name */
    union {null,string} name = null;
  /** Calc Set Description */
    union {null,string} description = null;
  /** Calc Set Node-Metrics */
    union {null,array<AVRNodeMetric>} nodeMetrics = null;
  }

/** Exposure-Coverage Matching Node */
  record AVRECMatchingNode {
  /** Exposure Attribute ID */
    union {null,int} exposureAttributeId = null;
  /** Coverage Attribute ID */
    union {null,int} coverageAttributeId = null;
  }

/** Mars Attributes */
  record AVRMarsAttributes {
  /** Exposure Attribute ID */
    union {null,int} exposureAttributeId = null;
  /** Coverage Attribute ID */
    union {null,int} coverageAttributeId = null;
  }

/** Exposure-Coverage Mars Match */
  record AVRECMarsMatch {
  /** EC Mars Match Id */
    union {null,int} ecMarsMatchId = null;
  /** Exposure Metric */
    union {null,AVRMetric} exposureMetric = null;
  /** Coverage Metric */
    union {null,AVRMetric} coverageMetric = null;
  /** Exposure Formula Type */
    union {null,AVRFormulaType} expFormulaType = null;
  /** Exposure Formula Type */
    union {null,AVRFormulaType} covFormulaType = null;
  /** Hierarchical Exposure Bucket */
    union {null,AVRHierarchicalBucket} hierExposureBucket = null;
  /** Hierarchical Coverage Bucket */
    union {null,AVRHierarchicalBucket} hierCoverageBucket = null;
  /** Exposure-Coverage Matching Nodes */
    union {null,array<AVRECMatchingNode>} ecMatchingNodes = null;
  /** Mars Attributes */
    union {null,array<AVRMarsAttributes>} nettingAttributes = null;
  /** Exposure EntityTypes */
    union {null,AVREntityGroup} exposureEntityGroup = null;
  /** Coverage EntityType */
    union {null,AVREntityGroup} coverageEntityGroup = null;
  /** Internal dependency on Mars Set */
    union {null,AVRECMarsSet} dependentMarsSet = null;
  }

/** Exposure-Coverage Mars Set */
  record AVRECMarsSet {
  /** Operation */
    union {null,AVRStandardOperations} operation=null;
  /** Coverage Set ID */
    union {null,int} coverageSetId = null;
  /** Coverage Set Name */
    union {null,string} coverageSetName = null;
  /** Coverage Set Description */
    union {null,string} description = null;
  /** Mars Matches */
    union {null,array<AVRECMarsMatch>} ecMarsMatch = null;
  /** Mars Order */
    union {null,AVRECMarsOrder} ecMarsOrder = null;
  /** Multi bucket classification */
    union {null,boolean} multiBucketClassification = null;
  }

/** Exposure-Coverage Mars Set Order */
  record AVRECMarsOrder {
  /** EC Mars Order Id */
    union {null,int} ecMarsOrderId = null;
  /** EC Mars Order Name */
    union {null,string} name = null;
  /** EC Mars Order Description */
    union {null,string} description = null;
  /** Attribute Order List */
    union {null,array<AVRECAttributeOrder>} attributeOrderList = null;
  }

/** Exposure-Coverage Attribute Order */
  record AVRECAttributeOrder {
  /** Attribute ID */
    union {null,int} attributeId = null;
  /** In Ascend Sw Flag */
    union {null,boolean} ascendSw = null;
  }

/** Rule Type */
  enum AVRRuleType {
    AGGREGATION_RULE, CONST_VALUE_RULE, DEPENDENCY_RULE, NETTING_RULE, MERGE_KL_RULE,
    HIERARCHICAL_RULE, CANADIAN_LEVERAGE_RULE
  }

/** Entity Bucket Pair */
  record AVREntityBucket {
  /** Entity Type */
    union {null, AVREntityType} entityType = null;
  /** Hierarchical buckets */
    union {null,AVRHierarchicalBucket} hBucket = null;
  }

/** Rule Category Detail*/
  record AVRRuleCategory {
  /** Operation */
    union {null,AVRStandardOperations} operation=null;
  /** Rule Category ID */
    union {null,int} ruleCategoryId = null;
  /** Rule Category Name */
    union {null,string} name = null;
  /** Rule Category Description */
    union {null,string} description = null;
  /** Entity Types Bucket Ids */
    union {null,array<AVREntityBucket>} entityBuckets = null;
  }

/** Rule */
  record AVRRule {
  /** Operation */
    union {null,AVRStandardOperations} operation=null;
  /** Rule ID */
    union {null,int} ruleId = null;
  /** Rule Name */
    union {null,string} ruleName = null;
  /** Rule Comment */
    union {null,string} ruleComment = null;
  /** G Comment */
    union {null,string} gComment = null;
  /** Sign off Type */
    union {null,string} signoffType = null;
  /** In Rev3 Flag */
    union {null,boolean} inRev3 = null;
  /** Hierarchical buckets */
    union {null,AVRHierarchicalBucket} hBucket = null;
  /** Calc Set */
    union {null,AVRCalcSet} calcSet = null;
  /** Rule Type */
    union {null,AVRRuleType} rType = null;
  /** Percentage Rule Flag */
    union {null,boolean} isPercentageRule = null;
  /** Group By Set */
    union {null,AVRGroupBySet} groupBySet = null;
  /** Entity Types */
    union {null,array<AVREntityType>} entityTypes = null;
  /** Limits */
    union {null,AVRLimitDetailSet} limits = null;
  /** Exposure-Coverage Mars Set */
    union {null,AVRECMarsSet} ecMarsSet = null;
  /** Staged Mars Set */
    union {null,AVRStagedMarsSet} stagedMarsSet = null;
  /** Core Rule */
    union {null,AVRRule} coreRule = null;
  /** Denom Rule */
    union {null,AVRRule} denomRule = null;
  /** Constant Value */
    union {null,double} constantValue = null;
  /** Merge KL Flag */
    union {null,boolean} mergeKL = null;
  /** Error Message Describing The Reason Why Record Is Invalid */
    union {null,string} errorMsg = null;
  /** limit country no */
    union {null,int} limitCountryNo = null;
  /** ace notes */
    union {null,string} aceNotes = null;
  /** rev3 notes */
    union {null,string} rev3Notes = null;
  /** rule category */
    union {null,AVRRuleCategory} ruleCategory = null;
  /** Child Rule Ids for Hierarchical rule*/
    union {null,array<AVRRule>} childRules = null;
  /** Account Number */
    union {null,int} acctNum = null;
  /** lLok Through Group for rule */
    union {null, AVRLookThroughGroup} lookThroughGroup = null;
  }

/** Rule plus all associated accounts */
  record AVRAccountsRule {
  /** Accounts linked to rule */
    union {null,array<int>} accts = null;
  /** Rule */
    union {null,AVRRule} rule = null;
  }

/** Entity Type */
  enum AVREntityType {
    POSITION, CTP_POSITION, CTP_TRANSACTION, CDX_LT, CDS_LT, CURRENCY_LEFT,
    CURRENCY_RIGHT, TWELVED3, TWELVED3_UNDERLYING, TAXLOTS, ACCOUNT_INFO, FIRMWIDE,
    LT_FW_UNDERLYINGS, LT_FW_CONSTITUENTS, LT_FW_FUT_CONSTITUENTS, TRN_TRANSACTION,
    STP_TRANSACTION, UNINVESTED_CASH, ALL, DEFAULT
  }

/************************* nodes *************************/
/** Node Type */
  enum AVRNodeType {
  /*DATE, NUMERICAL, CATEGORICAL, MULTICATEGORICAL, COMPARISON, METRIC*/
    TYPE_STRING,       /*1*/
    TYPE_INT,          /*2*/
    TYPE_DOUBLE,       /*3*/
    TYPE_DATE,         /*4*/
    TYPE_COMPARISON,   /*5*/
    TYPE_MULTI_ANY,    /*10*/
    TYPE_MULTI_NOT_ALL,/*11*/
    TYPE_MULTI_ALL,    /*12*/
    TYPE_EXPRESSION,   /*13*/
    TYPE_LIST_SET,     /*14*/
    TYPE_RATING        /*15*/
  }

/** Date Compare Type */
  enum AVRDateCompareType {
    DATE_RANGE, CONST_DATE, CYCLE_DATE_RANGE, CYCLE_DATE_LT, CYCLE_DATE_GT, COMPARE_DATES
  }

/** Holiday Schedule Type for NodeDateCalc*/
  enum AVRHolidayScheduleType {
    EXCLUDE_WEEKENDS_HOLIDAYS, EXCLUDE_WEEKENDS, EXCLUDE_NONE
  }

/** Node */
  record AVRNode {
  /** Operation */
    union {null,AVRStandardOperations} operation=null;
  /** Node Type */
    AVRNodeType avrNodeType;
  /** Node ID */
    union {null,int} nodeId = null;
  /** Attribute ID */
    union {null,int} attributeId = null;
  /** Data Dictionary Code Associated With Attribute ID */
    union {null,string} code = null;
  /** Inverted Operator Flag ('=' becomes '!=') */
    boolean exclude = false;
  /** Description */
    union {null,string} description = null;
  /** Strict Lower Bound Flag For NodeNumerical, NodeDateCalc,  NodeComparison */
    union {null,boolean} minStrictFlag = null;
  /** Strict Upper Bound Flag For NodeNumerical, NodeDateCalc,  NodeComparison */
    union {null,boolean} maxStrictFlag = null;
  /** Categorical Values */
    union {null,array<string>} categoricalValues = null;
  /** Date Comparison Type */
    union {null,AVRDateCompareType} dtComparisonType = null;
  /** Start Date */
    union {null,@logicalType("isodatetime") string} startDtValue = null;
  /** End Date */
    union {null,@logicalType("isodatetime") string} endDtValue = null;
  /** Date Constant */
    union {null,@logicalType("isodatetime") string} constDtValue = null;
  /** Comparison Attribute ID */
    union {null,int} comparisonAttID = null;
  /** Attribute IDs */
    union {null,array<int>} attributeIds = null;
  /** Upper Bound */
    union {null,double} numMaxValue = null;
  /** Lower Bound */
    union {null,double} numMinValue = null;
  /** As-Of Date */
    union {null,@logicalType("isodatetime") string} asOfDtValue = null;
  /** Min Value Attribute ID */
    union {null,int} minValueAttID = null;
  /** Max Value Attribute ID */
    union {null,int} maxValueAttID = null;
  /** Metric Expression */
    union {null,string} metricExpression = null;
  /** Query */
    union {null,string} query = null;
  /** Rating Id */
    union {null,int} ratingId = null;
  /** ratingKey */
    union {null,string} ratingKey = null;
  /** Holiday Schedule Type For NodeDateCalc*/
    union {null,AVRHolidayScheduleType} dtHolidayScheduleType = null;
  /** Compare Dates In Years Flag For NodeDateCalc*/
    union {null,boolean} compareDatesInYears = null;
  /** Identifies whether the comparison is for null values*/
    union {null,boolean} isNullComparison = null;
  }

/************************* limits *************************/
/** Limit Source */
  enum AVRLimitSource {
    UNDEFINED, ACCT_RCA, FIRMWIDE, LEGACY_ETP_FETMON
  }

/** Limit Detail Type */
  enum AVRLimitDetailType {
    RCALIMIT_DETAIL, ETP_LIMIT_DETAIL
  }

/** Operator */
  enum AVROperator {
    DEFAULT, LESS_THAN, GREATER_THAN, LESS_THAN_EQUAL, GREATER_THAN_EQUAL, EQUAL,
    NOT_EQUAL, NOT_PRESENT_IN_ACE, NOT_BETWEEN, PLUS_MINUS_X, IN, OUT, ASTERISK_X,
    PLUS_X, NOT_BETWEEN_BOUNDARY_INCLUSIVE
  }

/** Limit Detail */
  record AVRLimitDetail {
  /** Limit Source */
    union {null,AVRLimitSource} limitSource = null;
  /** Atrribute ID */
    union {null,int} attributeId = null;
  /** Limit Key */
    union {null,string} limitKey = null;
  /** Limit Val */
    union {null,double} limitVal = null;
  /** Limit Val 2 */
    union {null,double} limitVal2 = null;
  /** Operator */
    union {null,AVROperator} operator = null;
  /** RCA Type */
    union {null,string} rcaType = null;
  /** Action ID */
    union {null,int} actionId = null;
  /** Limit Detail Type */
    union {null,AVRLimitDetailType} limitDetailType = null;
  /** Threshold Type */
    union {null,string} threshType = null;
  /** Absolute Threshold String */
    union {null,string} absoluteThresholdStr = null;
  }

/** Limit Detail Set */
  record AVRLimitDetailSet {
  /** Limit Details */
    union {null,array<AVRLimitDetail>} limits = null;
  /** Attribute ID */
    union {null,int} attributeId = null;
  }

/************************* groupby *************************/
/** Aggregation Metric */
  enum AVRAggregationMetric {
    METRIC_SUM_TYPE, METRIC_ABS_SUM_TYPE, GROUPBY_SUM, GROUPBY_MIN_ZERO, GROUPBY_PICK_FROM_ANY_CHILD,
    ABS_GROUP_BY_AFTER_AGG, SINGLE_BUCKET_AGGREGATION, MULTI_BUCKET_AGGREGATION
  }

/** Generic Group By */
  record AVRGenericGroupBy {
  /** generic group by id */
    int genericGroupById ;
  /** Generic group by name */
    union {null,string} name = null;
  /** Generic group by description */
    union {null,string} description = null;
  /** Generic group by  attributes*/
    union {null,array<int>} genericGroupByAttributes = null;
  /** Operation */
    union {null,AVRStandardOperations} operation=null;
  }

/** Group By */
  record AVRGroupBy {
  /** Attribute ID */
    union {null,int} attributeId = null;
  /** Level No */
    union {null,int} levelNo = null;
  /** Aggregation Type */
    union {null,AVRAggregationMetric} aggType = null;
  /** Bucket */
    union {null,AVRHierarchicalBucket} hierarchicalBucket = null;
  /** Bucket Order*/
    union {null,int} bucketOrder = null;
  /** Generic group by id*/
    union {null,AVRGenericGroupBy} genericGroupBy = null;
  }

/** Group By Set */
  record AVRGroupBySet {
  /** Operation */
    union {null,AVRStandardOperations} operation = null;
  /** Group By Set ID */
    union {null,int} groupBySetId = null;
  /** Name  */
    union {null,string} name = null;
  /** Description */
    union {null,string} description = null;
  /** Group Bys */
    union {null,array<AVRGroupBy>} groupBys = null;
  }

/** Record is used to identify whether a task dependency is getting created or otherwise*/
  record AVRDependenciesCheck {
  /** Yes/No for dependency */
    union {null, boolean} dependencyExists = null;
  /** String describes dependency details */
    union {null, string} dependencyInfo = null;
  /** If an error was generated while checking for dependencies, the error info is populated here */
    union {null, string} errorInfo = null;
  }

/** HB operation types */
  enum AVRHBOperation {  UNION,INTERSECTION, DIFFERENCE}

/** Enum is used to differentiate between hierarchical bucket and node  */
  enum AVRHBMemberType {  ISBUCKET, ISNODE}

/** Record is used to identify member of a hierarchical bucket*/
  record AVRHBMember {
  /** Identifies whether the hierarchical bucket member is a bucket or node  */
    union {null, AVRHBMemberType} memberType = null;
  /** References to other HBs  */
    union {null, AVRHierarchicalBucket} hBucket = null;
  /** References to nodes  */
    union {null, AVRNode} node = null;
  }

/** Hierarchical Bucket*/
  record AVRHierarchicalBucket {
  /** Operation relative to Mid tier */
    union {null,AVRStandardOperations} operation = null;
  /** Operation on the hierarchical bucket */
    union {null, AVRHBOperation} hbOperationType = null;
  /** Hierarchical Bucket Id */
    union {null,int} hbId = null;
  /** Hierarchical Bucket Name */
    union {null,string} hbName = null;
  /** Hierarchical Bucket Description */
    union {null,string} description = null;
  /** References to other HBs  */
    union {null,array<AVRHBMember>} hBMembers = null;
  /** Identifies domain of the hierarchical buckets */
    union {null,string} domain = null;

  }

/** Template generator actions */
  enum AVRMessageReplyStatus { SUCCESS, FAILURE}

/** Process Task Reply */
  record AVRProcessTaskReply {
  /** task */
    union {null, AVRTask} task = null;
  /** error description message in case of errors*/
    union {null, AVRMessageReplyStatus} messageReplyStatus = null;
  /** error description message in case of errors*/
    union {null, string} errorDescription = null;

  }

/** This enum defines list of possible operations on a task */
  enum AVRTaskAction {NEW, INPROGRESS, DELETE, COMPLETE, REJECT, APPROVE, DEPLOY}

/** This enum defines list of possible states on a task */
  enum AVRTaskState {INPROGRESS, COMPLETED, REJECTED, APPROVED, DEPLOYED, DELETED }

/** This record processes the task */
  record AVRProcessTask{
  /** task action */
    union {null,AVRTaskAction} taskAction = null;
  /** task  */
    union {null,AVRTask} task = null;
  }

/** This record defines information of a task */
  record AVRTask {
  /** task name */
    union {null,string} name = null;
  /** task description */
    union {null,string} description = null;
  /** task id */
    union {null,long} taskId = null;
  /** state */
    union {null,AVRTaskState} state = null;
  /** action date*/
    union {null,@logicalType("isodatetime") string} actionDate = null;
  /** action user */
    union {null,string} actionUser = null;
  /** create user */
    union {null,string} createUser = null;
  /** create date*/
    union {null,@logicalType("isodatetime") string} createDate = null;
  /** Task History */
    union {null,array<AVRTaskStateHistory>} taskStateHistory = null;

  }

/** This record defines task history */
  record AVRTaskStateHistory {
  /** state */
    union {null,AVRTaskState} state = null;
  /** action date*/
    union {null,@logicalType("isodatetime") string} actionDate = null;
  /** action user */
    union {null,string} actionUser = null;
  }

/** This enum defines list of possible actions on an event */
  enum AVREventExecutionType {EXECUTE, ROLLBACK}

/** This enum defines list of possible components that can be acted upon. */
  enum AVREventType {NODE, METRIC, CALCSET, NETTINGSET, STAGEDNETTINGSET, GROUPBYSET, GENERIC_GROUP_BY,
    RULE, RATING, HIERARCHICALBUCKET, RULE_CATEGORY, ENTITY_GROUP, LOOK_THROUGH_GROUP, NONE}

/** This structure is returned as reply for the event action.*/
  record AVREventActionReply  {
  /** Event id corresponding to the event action*/
    union {null, long } eventId = null;
  /** Enum indicating the type of event*/
    AVREventType eventType;
  /** unowned Components */
    union {null,array<AVRComponentUsage>} unownedComponents = null;
  /** error description message in case of errors*/
    union {null, AVRMessageReplyStatus} messageReplyStatus = null;
  /** error description message in case of errors*/
    union {null, string} errorDescription = null;
  /** List of nodes */
    union {null,array<AVRNode>} nodes = null;
  /** List of Metrics */
    union {null,array<AVRMetric>} metrics = null;
  /** List of CalcSets */
    union {null,array<AVRCalcSet>} calcSets = null;
  /** List of Mars Sets */
    union {null,array<AVRECMarsSet>} nettingSets = null;
  /** List of Staged Mars Sets */
    union {null,array<AVRStagedMarsSet>} stagedMarsSets = null;
  /** List of Group By Sets */
    union {null,array<AVRGroupBySet>} groupBySets = null;
  /** Rules */
    union {null,array<AVRRule>} rules = null;
  /** RatingInfos */
    union {null,array<AVRRatingInfo>} ratingInfos = null;
  /** AVRGenericGroupBy */
    union {null,array<AVRGenericGroupBy>} genericGroupBys = null;
  /** List of HBs */
    union {null,array<AVRHierarchicalBucket>} hierarchicalBuckets = null;
  /** List of RuleCategories */
    union {null,array<AVRRuleCategory>} ruleCategories = null;
  /** List of EntityGroups */
    union {null,array<AVREntityGroup>} entityGroups = null;
  /** List of LookThroughGroups */
    union {null,array<AVRLookThroughGroup>} lookThroughGroups = null;
  }

/** This record defines event action */
  record AVREventAction  {
  /** event info*/
    AVREventInfo eventInfo;
  /** List of nodes */
    union {null,array<AVRNode>} nodes = null;
  /** List of Hierarchical buckets */
    union {null,array<AVRHierarchicalBucket>} hBuckets = null;
  /** List of Metrics */
    union {null,array<AVRMetric>} metrics = null;
  /** List of CalcSets */
    union {null,array<AVRCalcSet>} calcSets = null;
  /** List of Mars Sets */
    union {null,array<AVRECMarsSet>} nettingSets = null;
  /** List of Staged Mars Sets */
    union {null,array<AVRStagedMarsSet>} stagedMarsSets = null;
  /** List of Group By Sets */
    union {null,array<AVRGroupBySet>} groupBySets = null;
  /** Rules */
    union {null,array<AVRRule>} rules = null;
  /** RatingInfos */
    union {null,array<AVRRatingInfo>} ratingInfos = null;
  /** AVRGenericGroupBy */
    union {null,array<AVRGenericGroupBy>} genericGroupBys = null;
  /** AVRRuleCategory */
    union {null,array<AVRRuleCategory>} ruleCategories = null;
  /** AVREntityGroup */
    union {null,array<AVREntityGroup>} entityGroups = null;
  /** List of LookThroughGroups */
    union {null,array<AVRLookThroughGroup>} lookThroughGroups = null;
  }

/** This record defines event info */
  record AVREventInfo  {
  /** Enum indicating the type of event*/
    AVREventType eventType;
  /** Skips Avro Conversion for object with AVRStandardOperations.NOOP  */
    union {null,boolean} skipNoopConversion = null;
  /** This is the task id*/
    long taskId;
  /** This is the enum specifying type of action on a given component*/
    union {null, AVREventExecutionType} eventExecutionType = null;
  /** This is the id of the user executing the action*/
    union {null, string } userId = null;
  /** This is a name for this event*/
    union {null, string } eventName = null;
  /** In case of rollback an event id will be specified*/
    union {null, long } eventId = null;
  /** This item specifies the time stamp of the event */
    union {null,@logicalType("isodatetime") string} actionDate = null;
  /** Info about client who is currently using component */
    union {null, AVRClientInfo} clientInfo = null;
  }


/** Data dictionary */
  record AVRDataDictionary{
  /** attribute Id */
    union {null,long} attributeId = null;
  /** domain Id */
    union {null,string} domainName = null;
  /** data tp */
    union {null,long} dataTp = null;
  /** display name */
    union {null,string} displayName = null;
  /** code */
    union {null,string} code = null;
  /** scalable */
    union {null,boolean} scalable = null;
  /** description */
    union {null,string} description = null;
  /** Last update date*/
    union {null,@logicalType("isodatetime") string} lastUpdateDate = null;
  /** Last update user */
    union {null,string} lastUpdateUser = null;
  }

/** Data dictionary results*/
  record AVRLookupDictionaryResults {
  /** Data dictionary records */
    union {null,array<AVRDataDictionary>} dataDictionaryRecords = null;
  }

/** Task Details */
  record AVRTaskDetails {
  /** Task */
    union {null, AVRTask} task =  null;
  /** Event */
    union {null,array<AVREvent>} events = null;
  /** Task components */
    union {null,array<AVRTaskComponents>} taskComponentList = null;
  /** If it's a super task then we list out merged Tasks */
    union {null, array<AVRTask>} mergedTasks =  null;
  }

/** Task Components */
  record AVRTaskComponents {
  /** AVREventType */
    union {null, AVREventType} eventType =  null;
  /** component Ids */
    union {null,array<int>} componentIds = null;
  }

/** Event */
  record AVREvent {
  /** event Id */
    union {null,long} eventId = null;
  /** name */
    union {null,string} name = null;
  /** This is the enum specifying type of action on a given component*/
    union {null, AVREventExecutionType} eventExecutionType = null;
  /** steps */
    union {null,array<AVRStep>} steps = null;
  /** event User */
    union {null,string} eventUser = null;
  /** event Date */
    union {null,@logicalType("isodatetime") string} eventDate = null;
  }

/** Step */
  record AVRStep {
  /** step Id */
    union {null,long} stepId = null;
  /** name */
    union {null,string} name = null;
  /** sql statements */
    union {null, array<AVRSqlStatement>} sqlStatements = null;
  }

/** Sql Statement */
  record AVRSqlStatement {
  /** This is the enum specifying type of action on a given component*/
    union {null, AVREventExecutionType} eventExecutionType = null;
  /** actionSql */
    union {null,string} actionSql = null;
  /** rollbackSql */
    union {null,string} rollbackSql = null;
  }

/** Component Usage Details */
  record AVRComponentUsage {
  /** component Id */
    union {null, int} componentId = null;
  /** Enum indicating the type of event*/
    AVREventType eventType;
  /** Enum indicating the type of action on client lock (LOCK or UNLOCK) */
    AVRClientLockAction clientLockAction;
  /** Info about client who is currently using component */
    union {null, AVRClientInfo} clientInfo = null;
  /** Last update date*/
    union {null,@logicalType("isodatetime") string} lastUpdateDate = null;
  /** Last update user */
    union {null,string} lastUpdateUser = null;
  }

/** Client Info */
  record AVRClientInfo {
  /** client Id */
    union {null, long} clientId = null;
  /** user name */
    union {null,string} userName = null;
  /** host name */
    union {null,string} hostName = null;
  /** instance number*/
    union {null,int} instanceNo = null;
  /** state */
    union {null,boolean} state = null;
  /** email Id */
    union {null,string} emailId = null;
  /** Last update date*/
    union {null,@logicalType("isodatetime") string} lastUpdateDate = null;
  /** Last update user */
    union {null,string} lastUpdateUser = null;
  }

/** Component Status Reply */
  record AVRComponentStatusReply {
  /** component Id */
    union {null, int} componentId = null;
  /** Enum indicating the type of event*/
    AVREventType eventType;
  /** Enum indicating the type of lock*/
    AVRLockType lockType;
  /** Task */
    union {null, AVRTask} task =  null;
  /** Info about client who is currently using component */
    union {null, AVRClientInfo} clientInfo = null;
  /** error description message in case of errors*/
    union {null, AVRMessageReplyStatus} messageReplyStatus = null;
  /** error description message in case of errors*/
    union {null, string} errorDescription = null;
  }

/** This enum defines list of possible locks that can be acted upon. */
  enum AVRLockType {NONE, CLIENT, SERVER, DELETED}

/** This enum defines list of possible client lock actions that can be acted upon. */
  enum AVRClientLockAction {UN_LOCK, FORCE_LOCK, LOCK, NONE, REFERENCES_ONLY}

/** Task Dependencies */
  record AVRTaskDependencies {
  /** List of all tasks in scope*/
    union {null, array<long>} allTaskIds = null;
  /** Task Dependencies */
    union {null, array<AVRTaskDependency>} taskDependencies = null;
  /** Super task details of the combined tasks*/
    union {null, AVRTaskDetails } superTask = null;
  }

/** Task Dependency */
  record AVRTaskDependency {
  /** source task id  */
    union {null,long} sourceTaskId = null;
  /** dependent task id  */
    union {null,long} dependentTaskId = null;
  /** nodeIds  */
    union {null,array<int>} nodeIds = null;
  /** bucketIds */
    union {null, array<int>} bucketIds = null;
  /** bucketSetIds */
    union {null, array<int>} bucketSetIds = null;
  /** hBucketIds */
    union {null, array<int>} hBucketIds = null;
  /** metricIds */
    union {null, array<int>} metricIds = null;
  /** calcSetIds */
    union {null, array<int>} calcSetIds = null;
  /** coverageSetIds */
    union {null, array<int>} coverageSetIds = null;
  /** stagedMarsSetIds */
    union {null, array<int>} stagedMarsSetIds = null;
  /** groupBySetIds */
    union {null, array<int>} groupBySetIds = null;
  /** ruleIds */
    union {null, array<int>} ruleIds = null;
  /** ratingIds */
    union {null, array<int>} ratingIds = null;
  /** genericGroupByIds */
    union {null, array<int>} genericGroupByIds = null;
  /** ruleCategoryIds */
    union {null, array<int>} ruleCategoryIds = null;
  /** lookThroughGroupIds */
    union {null, array<int>} lookThroughGroupIds = null;
  }

/** The rating info record is used to identify a single rating record */
  record AVRRatingInfo {
  /** rating id  */
    union {null,int} ratingId = null;
  /** rating key*/
    union {null,string} ratingKey = null;
  /** rating Desc*/
    union {null,string} ratingDesc = null;
  /** Operation */
    union {null,AVRStandardOperations} operation=null;
  }

/** The rating cache contains array of rating records. */
  record AVRRatingListCache {
  /** list of rating info */
    union {null, array<AVRRatingInfo>} ratingInfoArray = null;
  }

/** The country info record */
  record AVRCountryInfo {
  /** country no */
    union {null,int} countryNo = null;
  /** iso country code */
    union {null,string} isoCountryCode = null;
  /** beans code */
    union {null,string} beansCode = null;
  /** agg beans code */
    union {null,string} aggCurrencyCode = null;
  }

/** The metric type info record */
  record AVRMetricType {
  /** metric tp */
    union {null,int} metricTp = null;
  /** metric code */
    union {null,string} code = null;
  /** metric description */
    union {null,string} description = null;
  }

/** Component Lock Status */
  record AVRLockStatus{
  /** Enum indicating the type of action on client lock (LOCK or UNLOCK) */
    AVRClientLockAction clientLockAction;
  /** event action */
    AVREventAction eventAction;
  }

/** Component Lock Status Reply*/
  record AVRLockStatusReply{
  /** Lock Type */
    union {null, AVRLockType} lockType = null;
  /** Info about client who is currently using component */
    union {null, AVRClientInfo} clientInfo = null;
  /** String describes lock details */
    union {null, string} lockDetails = null;
  /** If an error was generated while checking for lock, the error details are populated here */
    union {null, string} errorDetails = null;
  }

}
